/*
 * tt_player_manager.h
 *
 *  Created on: 6 Nov 2020
 *      Author: alfre
 */

#ifndef TT_PLAYER_MANAGER_H_
#define TT_PLAYER_MANAGER_H_

#include <iostream>
#include <vector>

using namespace std;

#include "tt_player_component.h"
#include "tt_player_message.h"

enum TTPlayerState
{
	IDLE,
	START,
	STOPPED
};

class TTPlayerManager final : public TTPlayerComponent {
public:
	TTPlayerManager()
	{
		state = IDLE;
	};

	virtual ~TTPlayerManager(){
		stopThread();
	};

	void startThread();
	void stopThread();
	void update()
	{
		//vector< pTTPlayerMessage >::iterator it;

		for (auto it = components.begin(); it != components.end(); it++ )
		{
			(*it)->update();
		}
	};

	bool onNewMessage( pTTPlayerMessage message)
	{
		//vector< pTTPlayerMessage >::iterator it;

		for (auto it = components.begin(); it != components.end(); it++ )
		{
			(*it)->receive(message);
		}

		return false;
	};


private:

	// sync
	vector< pTTPlayerComponent > components;

	// async
	vector< pTTPlayerComponent > isteners;

	TTPlayerState state;

};

#endif /* TT_PLAYER_MANAGER_H_ */
